# 1 "PolynomialConstraintsLexer.mll"
 
  module Make(C : ConstraintTypes.ParseablePolynomialConstraints) =
    struct
      open Lexing
      module P = PolynomialConstraintsParser.Make(C)
         
      exception SyntaxError of string
                             
      let next_line lexbuf =
        let pos = lexbuf.lex_curr_p in
        lexbuf.lex_curr_p <-
          { pos with pos_bol = lexbuf.lex_curr_pos;
                     pos_lnum = pos.pos_lnum + 1
          }

# 18 "PolynomialConstraintsLexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\237\255\001\000\002\000\030\000\003\000\245\255\246\255\
    \247\255\248\255\249\255\250\255\251\255\084\000\159\000\254\255\
    \001\000\003\000\252\255\244\255\241\255\243\255\239\255\238\255\
    ";
  Lexing.lex_backtrk = 
   "\255\255\255\255\018\000\015\000\013\000\018\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\003\000\002\000\255\255\
    \001\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_default = 
   "\001\000\000\000\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\000\000\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\017\000\015\000\015\000\017\000\016\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \017\000\000\000\000\000\017\000\000\000\000\000\002\000\023\000\
    \012\000\011\000\009\000\010\000\000\000\008\000\000\000\000\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\000\000\000\000\004\000\005\000\003\000\022\000\
    \019\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\020\000\021\000\000\000\007\000\013\000\
    \000\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\018\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\000\000\
    \000\000\000\000\000\000\013\000\000\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\016\000\017\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\017\000\255\255\255\255\000\000\002\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000\003\000\
    \005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\004\000\004\000\255\255\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\013\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\255\255\
    \255\255\255\255\255\255\013\000\255\255\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec read lexbuf =
    __ocaml_lex_read_rec lexbuf 0
and __ocaml_lex_read_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 27 "PolynomialConstraintsLexer.mll"
             ( read lexbuf )
# 164 "PolynomialConstraintsLexer.ml"

  | 1 ->
# 28 "PolynomialConstraintsLexer.mll"
             ( next_line lexbuf; read lexbuf )
# 169 "PolynomialConstraintsLexer.ml"

  | 2 ->
# 29 "PolynomialConstraintsLexer.mll"
             ( P.UINT (int_of_string (Lexing.lexeme lexbuf)) )
# 174 "PolynomialConstraintsLexer.ml"

  | 3 ->
# 30 "PolynomialConstraintsLexer.mll"
             ( P.ID (Lexing.lexeme lexbuf) )
# 179 "PolynomialConstraintsLexer.ml"

  | 4 ->
# 31 "PolynomialConstraintsLexer.mll"
             ( P.LPAR )
# 184 "PolynomialConstraintsLexer.ml"

  | 5 ->
# 32 "PolynomialConstraintsLexer.mll"
             ( P.RPAR )
# 189 "PolynomialConstraintsLexer.ml"

  | 6 ->
# 33 "PolynomialConstraintsLexer.mll"
             ( P.PLUS )
# 194 "PolynomialConstraintsLexer.ml"

  | 7 ->
# 34 "PolynomialConstraintsLexer.mll"
             ( P.TIMES )
# 199 "PolynomialConstraintsLexer.ml"

  | 8 ->
# 35 "PolynomialConstraintsLexer.mll"
             ( P.MINUS )
# 204 "PolynomialConstraintsLexer.ml"

  | 9 ->
# 36 "PolynomialConstraintsLexer.mll"
             ( P.POW )
# 209 "PolynomialConstraintsLexer.ml"

  | 10 ->
# 37 "PolynomialConstraintsLexer.mll"
             ( P.EOF )
# 214 "PolynomialConstraintsLexer.ml"

  | 11 ->
# 38 "PolynomialConstraintsLexer.mll"
             ( P.EQUAL )
# 219 "PolynomialConstraintsLexer.ml"

  | 12 ->
# 39 "PolynomialConstraintsLexer.mll"
             ( P.NEQ )
# 224 "PolynomialConstraintsLexer.ml"

  | 13 ->
# 40 "PolynomialConstraintsLexer.mll"
             ( P.LESSTHAN )
# 229 "PolynomialConstraintsLexer.ml"

  | 14 ->
# 41 "PolynomialConstraintsLexer.mll"
             ( P.LESSEQUAL )
# 234 "PolynomialConstraintsLexer.ml"

  | 15 ->
# 42 "PolynomialConstraintsLexer.mll"
             ( P.GREATERTHAN )
# 239 "PolynomialConstraintsLexer.ml"

  | 16 ->
# 43 "PolynomialConstraintsLexer.mll"
             ( P.GREATEREQUAL )
# 244 "PolynomialConstraintsLexer.ml"

  | 17 ->
# 44 "PolynomialConstraintsLexer.mll"
             ( P.COMMA )
# 249 "PolynomialConstraintsLexer.ml"

  | 18 ->
# 45 "PolynomialConstraintsLexer.mll"
             ( raise (SyntaxError ("Unexpected char: " ^ Lexing.lexeme lexbuf)) )
# 254 "PolynomialConstraintsLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_read_rec lexbuf __ocaml_lex_state

;;

# 47 "PolynomialConstraintsLexer.mll"
 
  end

# 265 "PolynomialConstraintsLexer.ml"
