USE_OCAMLFIND = true

if $(defined-env RELEASE)
    # For now only use -O2 optimization flags since -O3 does seem to
    # change the compiled programs behaviour.
    # E.g. the filling_vol probabilistic example runs fine with -O2 enabled
    # but does not terminate with -O3
    # (Strangely koat does terminate if the size or time loggers are enabled).
    OCAMLOPTFLAGS = -thread -O2 -cc $(CXX) -ccopt -static
    OCAMLCFLAGS = -thread -ccopt -static
    BYTE_ENABLED = false
    NATIVE_ENABLED = true
    export
else
    OCAMLOPTFLAGS = -thread -g -cc $(CXX)
    OCAMLCFLAGS = -thread
    BYTE_ENABLED = false
    NATIVE_ENABLED = true
    export

.PHONY: clean doc install test

# Function that creates an intermediate format for a documentation
# Has to be called from each package which should occur in the documentation
# We also add documentation of ml-files, because we define module types in ml-files, to prevent duplication of code
public.InterfaceDoc(name, files) =
    protected.mlifiles = $(filter-exists $(addsuffix .mli, $(files)))
    protected.correspondend_mlfiles = $(addsuffix .ml, $(removesuffix $(mlifiles)))
    protected.mlfiles = $(set-diff $(filter-exists $(addsuffix .ml, $(files))), $(correspondend_mlfiles))
    protected.cmifiles = $(addsuffix .cmi, $(removesuffix $(mlifiles) $(mlfiles)))

    $(name).idoc: $(mlifiles) $(mlfiles) $(cmifiles) $(OCamlLibrary $(LIB), $(FILES)) /.PHONY/OCamlGeneratedFilesTarget $(addsuffix .idoc, $(OCAML_LIBS))
        ocamlfind ocamldoc -hide-warnings -dump $(name).idoc -stars \
            $(PREFIXED_OCAMLINCLUDES) -package "$(OCAMLPACKS)" \
            $(mlifiles) \
            $(mlfiles)
    return $(name).idoc

OCAMLPACKS[] =
    apron
    apron.boxD
    apron.octD
    batteries
    fpath
    oUnit
    ocamlgraph
    netstring
    ppx_deriving
    ppx_deriving.eq
    ppx_deriving.ord
    ppx_deriving.show
    ppx_deriving_cmdliner
    z3

CUSTOM_LIBS[] =
    util
    poly
    constraints
    smt
    transitionsystem
    exactruntime
    parser
    bounds
    preprocessors
    main

# All the intermediate formats of package documentations
IDOCS[] = $(foreach $(fun x => $(x)/$(x).idoc), $(CUSTOM_LIBS))

# The directory where the documentation should be stored
DOC_DIR = ../docs

.SUBDIRS: $(CUSTOM_LIBS) test

# Target how the whole documentation should be build
doc: $(IDOCS)
    mkdir -p $(DOC_DIR)
    rm -rf $(DOC_DIR)/*
    ocamlfind ocamldoc -hide-warnings -d $(DOC_DIR) -stars -t "Koat2" -html \
        $(mapprefix -load, $(IDOCS))

.DEFAULT: doc install

clean:
    rm -f \
        *.omc \
        *.log \
        *.cache \
        $(DOC_DIR)/* \
        *.idoc
