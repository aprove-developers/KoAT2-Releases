Timebounds: 
  Overall timebound: inf [Infinity]
  1: one->two: 1 [O(1)]
  0: start->one: 1 [O(1)]
  3: three->four: 1 [O(1)]
  2: two->three: 1 [O(1)]

Costbounds:
  Overall costbound: inf [Infinity]
  4: four->leftOne: inf [Infinity]
  5: four->rightOne: inf [Infinity]
  12: leftFour->four: inf [Infinity]
  6: leftOne->leftTwo: inf [Infinity]
  8: leftThree->leftFour: inf [Infinity]
  7: leftTwo->leftThree: inf [Infinity]
  1: one->two: 1 [O(1)]
  13: rightFour->four: inf [Infinity]
  9: rightOne->rightTwo: inf [Infinity]
  11: rightThree->rightFour: inf [Infinity]
  10: rightTwo->rightThree: inf [Infinity]
  0: start->one: 1 [O(1)]
  3: three->four: 1 [O(1)]
  2: two->three: 1 [O(1)]

Sizebounds:
`Lower:
  1: one->two, a: a [O(n)]
  1: one->two, b: b [O(n)]
  0: start->one, a: a [O(n)]
  0: start->one, b: b [O(n)]
  3: three->four, a: a [O(n)]
  3: three->four, b: b [O(n)]
  2: two->three, a: a [O(n)]
  2: two->three, b: b [O(n)]
`Upper:
  4: four->leftOne, a: max{0, a} [O(n)]
  4: four->leftOne, b: max{-1, -1+a} [O(n)]
  5: four->rightOne, a: max{0, a} [O(n)]
  5: four->rightOne, b: max{0, -1, max{b, -1+a}} [O(n)]
  12: leftFour->four, a: max{0, a} [O(n)]
  12: leftFour->four, b: max{-1, -1+a} [O(n)]
  6: leftOne->leftTwo, a: max{0, a} [O(n)]
  6: leftOne->leftTwo, b: max{-1, -1+a} [O(n)]
  8: leftThree->leftFour, a: max{0, a} [O(n)]
  8: leftThree->leftFour, b: max{-1, -1+a} [O(n)]
  7: leftTwo->leftThree, a: max{0, a} [O(n)]
  7: leftTwo->leftThree, b: max{-1, -1+a} [O(n)]
  1: one->two, a: a [O(n)]
  1: one->two, b: b [O(n)]
  13: rightFour->four, a: max{0, a} [O(n)]
  13: rightFour->four, b: max{0, -1, max{b, -1+a}} [O(n)]
  9: rightOne->rightTwo, a: max{0, a} [O(n)]
  9: rightOne->rightTwo, b: max{0, -1, max{b, -1+a}} [O(n)]
  11: rightThree->rightFour, a: max{0, a} [O(n)]
  11: rightThree->rightFour, b: max{0, -1, max{b, -1+a}} [O(n)]
  10: rightTwo->rightThree, a: max{0, a} [O(n)]
  10: rightTwo->rightThree, b: max{0, -1, max{b, -1+a}} [O(n)]
  0: start->one, a: a [O(n)]
  0: start->one, b: b [O(n)]
  3: three->four, a: a [O(n)]
  3: three->four, b: b [O(n)]
  2: two->three, a: a [O(n)]
  2: two->three, b: b [O(n)]
