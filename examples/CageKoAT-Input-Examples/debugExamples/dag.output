Timebounds: 
  Overall timebound: 14 [O(1)]
  4: four->leftOne: 1 [O(1)]
  5: four->rightOne: 1 [O(1)]
  13: leftFour->collector: 1 [O(1)]
  6: leftOne->leftTwo: 1 [O(1)]
  8: leftThree->leftFour: 1 [O(1)]
  7: leftTwo->leftThree: 1 [O(1)]
  1: one->two: 1 [O(1)]
  12: rightFour->collector: 1 [O(1)]
  9: rightOne->rightTwo: 1 [O(1)]
  11: rightThree->rightFour: 1 [O(1)]
  10: rightTwo->rightThree: 1 [O(1)]
  0: start->one: 1 [O(1)]
  3: three->four: 1 [O(1)]
  2: two->three: 1 [O(1)]

Costbounds:
  Overall costbound: 14 [O(1)]
  4: four->leftOne: 1 [O(1)]
  5: four->rightOne: 1 [O(1)]
  13: leftFour->collector: 1 [O(1)]
  6: leftOne->leftTwo: 1 [O(1)]
  8: leftThree->leftFour: 1 [O(1)]
  7: leftTwo->leftThree: 1 [O(1)]
  1: one->two: 1 [O(1)]
  12: rightFour->collector: 1 [O(1)]
  9: rightOne->rightTwo: 1 [O(1)]
  11: rightThree->rightFour: 1 [O(1)]
  10: rightTwo->rightThree: 1 [O(1)]
  0: start->one: 1 [O(1)]
  3: three->four: 1 [O(1)]
  2: two->three: 1 [O(1)]

Sizebounds:
`Lower:
  4: four->leftOne, a: a [O(n)]
  4: four->leftOne, b: b [O(n)]
  5: four->rightOne, a: a [O(n)]
  5: four->rightOne, b: a [O(n)]
  13: leftFour->collector, a: a [O(n)]
  6: leftOne->leftTwo, a: a [O(n)]
  6: leftOne->leftTwo, b: b [O(n)]
  8: leftThree->leftFour, a: a [O(n)]
  7: leftTwo->leftThree, a: a [O(n)]
  1: one->two, a: a [O(n)]
  1: one->two, b: b [O(n)]
  12: rightFour->collector, a: a [O(n)]
  9: rightOne->rightTwo, a: a [O(n)]
  11: rightThree->rightFour, a: a [O(n)]
  10: rightTwo->rightThree, a: a [O(n)]
  0: start->one, a: a [O(n)]
  0: start->one, b: b [O(n)]
  3: three->four, a: a [O(n)]
  3: three->four, b: b [O(n)]
  2: two->three, a: a [O(n)]
  2: two->three, b: b [O(n)]
`Upper:
  4: four->leftOne, a: a [O(n)]
  4: four->leftOne, b: -1+a [O(n)]
  5: four->rightOne, a: a [O(n)]
  5: four->rightOne, b: b [O(n)]
  13: leftFour->collector, a: a [O(n)]
  13: leftFour->collector, b: -1+a [O(n)]
  6: leftOne->leftTwo, a: a [O(n)]
  6: leftOne->leftTwo, b: -1+a [O(n)]
  8: leftThree->leftFour, a: a [O(n)]
  8: leftThree->leftFour, b: -1+a [O(n)]
  7: leftTwo->leftThree, a: a [O(n)]
  7: leftTwo->leftThree, b: -1+a [O(n)]
  1: one->two, a: a [O(n)]
  1: one->two, b: b [O(n)]
  12: rightFour->collector, a: a [O(n)]
  12: rightFour->collector, b: b [O(n)]
  9: rightOne->rightTwo, a: a [O(n)]
  9: rightOne->rightTwo, b: b [O(n)]
  11: rightThree->rightFour, a: a [O(n)]
  11: rightThree->rightFour, b: b [O(n)]
  10: rightTwo->rightThree, a: a [O(n)]
  10: rightTwo->rightThree, b: b [O(n)]
  0: start->one, a: a [O(n)]
  0: start->one, b: b [O(n)]
  3: three->four, a: a [O(n)]
  3: three->four, b: b [O(n)]
  2: two->three, a: a [O(n)]
  2: two->three, b: b [O(n)]
