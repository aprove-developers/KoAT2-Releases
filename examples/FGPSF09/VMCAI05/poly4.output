Timebounds: 
  Overall timebound: 1+max{0, A-B}+max{0, C-D}+max{0, C-D}+max{0, A-B} [O(n)]
  0: eval->eval: max{0, A-B} [O(n)]
  1: eval->eval: max{0, C-D} [O(n)]
  2: eval->eval: max{0, C-D} [O(n)]
  3: eval->eval: max{0, A-B} [O(n)]
  4: start->eval: 1 [O(1)]

Costbounds:
  Overall costbound: 1+max{0, A-B}+max{0, C-D}+max{0, C-D}+max{0, A-B} [O(n)]
  0: eval->eval: max{0, A-B} [O(n)]
  1: eval->eval: max{0, C-D} [O(n)]
  2: eval->eval: max{0, C-D} [O(n)]
  3: eval->eval: max{0, A-B} [O(n)]
  4: start->eval: 1 [O(1)]

Sizebounds:
`Lower:
  0: eval->eval, A: -max{0, -A} [O(n)]
  0: eval->eval, C: -max{0, -C} [O(n)]
  0: eval->eval, E: -max{0, -E} [O(n)]
  1: eval->eval, A: -max{0, -A} [O(n)]
  1: eval->eval, C: -max{0, -C} [O(n)]
  1: eval->eval, E: -max{0, -E} [O(n)]
  2: eval->eval, A: -max{0, -A} [O(n)]
  2: eval->eval, C: -max{0, -C} [O(n)]
  2: eval->eval, E: -max{0, -E} [O(n)]
  3: eval->eval, A: -max{0, -A} [O(n)]
  3: eval->eval, C: -max{0, -C} [O(n)]
  3: eval->eval, E: -max{0, -E} [O(n)]
  4: start->eval, A: A [O(n)]
  4: start->eval, B: B [O(n)]
  4: start->eval, C: C [O(n)]
  4: start->eval, D: D [O(n)]
  4: start->eval, E: E [O(n)]
`Upper:
  0: eval->eval, A: max{0, A} [O(n)]
  0: eval->eval, B: max{0, A} [O(n)]
  0: eval->eval, C: max{0, C} [O(n)]
  0: eval->eval, D: max{-1, -1+C} [O(n)]
  0: eval->eval, E: 2*(max{0, A-B}+max{0, C-D})+max{0, E} [O(n)]
  1: eval->eval, A: max{0, A} [O(n)]
  1: eval->eval, B: max{-1, -1+A} [O(n)]
  1: eval->eval, C: max{0, C} [O(n)]
  1: eval->eval, D: max{0, C} [O(n)]
  1: eval->eval, E: 2*(max{0, A-B}+max{0, C-D})+max{0, E} [O(n)]
  2: eval->eval, A: max{0, A} [O(n)]
  2: eval->eval, B: max{-1, 0, max{A, A, max{B, -1+A}}} [O(n)]
  2: eval->eval, C: max{0, C} [O(n)]
  2: eval->eval, D: max{0, C} [O(n)]
  2: eval->eval, E: 2*(max{0, A-B}+max{0, C-D})+max{0, E} [O(n)]
  3: eval->eval, A: max{0, A} [O(n)]
  3: eval->eval, B: max{0, A} [O(n)]
  3: eval->eval, C: max{0, C} [O(n)]
  3: eval->eval, D: max{0, -1, max{C, C, max{D, -1+C}}} [O(n)]
  3: eval->eval, E: 2*(max{0, A-B}+max{0, C-D})+max{0, E} [O(n)]
  4: start->eval, A: A [O(n)]
  4: start->eval, B: B [O(n)]
  4: start->eval, C: C [O(n)]
  4: start->eval, D: D [O(n)]
  4: start->eval, E: E [O(n)]
