Timebounds: 
  Overall timebound: 1+2*max{0, A-B}+max{0, C-B} [O(n)]
  0: eval->eval: max{0, A-B} [O(n)]
  1: eval->eval: max{0, A-B} [O(n)]
  3: eval->eval: max{0, C-B} [O(n)]
  6: start->eval: 1 [O(1)]

Costbounds:
  Overall costbound: 1+2*max{0, A-B}+max{0, C-B} [O(n)]
  0: eval->eval: max{0, A-B} [O(n)]
  1: eval->eval: max{0, A-B} [O(n)]
  3: eval->eval: max{0, C-B} [O(n)]
  6: start->eval: 1 [O(1)]

Sizebounds:
`Lower:
  0: eval->eval, A: -max{0, -A}+-2*max{0, A-B} [O(n)]
  0: eval->eval, C: -max{0, -C} [O(n)]
  1: eval->eval, A: -max{0, -A}+-2*max{0, A-B} [O(n)]
  1: eval->eval, C: -max{0, -C} [O(n)]
  3: eval->eval, A: -max{0, -A}+-2*max{0, A-B} [O(n)]
  3: eval->eval, C: -max{0, -C} [O(n)]
  6: start->eval, A: A [O(n)]
  6: start->eval, B: B [O(n)]
  6: start->eval, C: C [O(n)]
`Upper:
  0: eval->eval, A: max{0, A} [O(n)]
  0: eval->eval, B: max{-1, -1+A} [O(n)]
  0: eval->eval, C: max{0, C} [O(n)]
  1: eval->eval, A: max{0, A} [O(n)]
  1: eval->eval, B: max{-1, -1+A} [O(n)]
  1: eval->eval, C: max{0, C} [O(n)]
  3: eval->eval, A: max{0, A} [O(n)]
  3: eval->eval, B: max{0, -1, max{B, -1+A}} [O(n)]
  3: eval->eval, C: max{0, C} [O(n)]
  6: start->eval, A: A [O(n)]
  6: start->eval, B: B [O(n)]
  6: start->eval, C: C [O(n)]
