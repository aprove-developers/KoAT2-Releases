Timebounds: 
  Overall timebound: 1+max{0, A-B}+max{0, 1+A-B}+max{0, C-B} [O(n)]
  0: eval1->eval2: max{0, 1+A-B} [O(n)]
  1: eval2->eval2: max{0, C-B} [O(n)]
  2: eval2->eval1: max{0, A-B} [O(n)]
  3: start->eval1: 1 [O(1)]

Costbounds:
  Overall costbound: 1+max{0, A-B}+max{0, 1+A-B}+max{0, C-B} [O(n)]
  0: eval1->eval2: max{0, 1+A-B} [O(n)]
  1: eval2->eval2: max{0, C-B} [O(n)]
  2: eval2->eval1: max{0, A-B} [O(n)]
  3: start->eval1: 1 [O(1)]

Sizebounds:
`Lower:
  0: eval1->eval2, A: A-max{0, A-B} [O(n)]
  0: eval1->eval2, B: -inf [Infinity]
  0: eval1->eval2, C: -inf [Infinity]
  1: eval2->eval2, A: A-max{0, A-B} [O(n)]
  1: eval2->eval2, B: -inf [Infinity]
  1: eval2->eval2, C: -inf [Infinity]
  2: eval2->eval1, A: A-max{0, A-B} [O(n)]
  2: eval2->eval1, B: -inf [Infinity]
  2: eval2->eval1, C: -inf [Infinity]
  3: start->eval1, A: A [O(n)]
  3: start->eval1, B: B [O(n)]
  3: start->eval1, C: C [O(n)]
`Upper:
  0: eval1->eval2, A: A [O(n)]
  0: eval1->eval2, B: -1+A [O(n)]
  0: eval1->eval2, C: max{C, -1+A} [O(n)]
  1: eval2->eval2, A: A [O(n)]
  1: eval2->eval2, B: -1+A [O(n)]
  1: eval2->eval2, C: max{C, -1+A} [O(n)]
  2: eval2->eval1, A: A [O(n)]
  2: eval2->eval1, B: -1+A [O(n)]
  2: eval2->eval1, C: -1+A [O(n)]
  3: start->eval1, A: A [O(n)]
  3: start->eval1, B: B [O(n)]
  3: start->eval1, C: C [O(n)]
